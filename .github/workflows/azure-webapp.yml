name: Deploy Web (Next.js) to Azure App Service
on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      # Must be SQL Server: sqlserver://...;database=...;user=...;password=...;encrypt=true;trustServerCertificate=false
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        run: npm i -g pnpm@10

      - name: Corepack sanity
        run: |
          corepack enable
          corepack prepare pnpm@10 --activate
          pnpm -v

      - name: Install deps (root)
        run: pnpm install --frozen-lockfile

      - name: Prisma generate (web)
        working-directory: apps/web
        run: pnpm prisma generate

      - name: Build (apps/web)
        working-directory: apps/web
        run: |
          rm -rf .next
          pnpm build
          echo "=== .next (top) ==="; ls -la .next || true
          echo "=== .next/standalone (top) ==="; ls -la .next/standalone || true
          echo "=== search for server.js ==="; find .next/standalone -maxdepth 3 -name server.js -print || true

      - name: Resolve standalone root
        id: resolve
        working-directory: apps/web
        run: |
          set -e
          ROOT=".next/standalone"
          if [ -f "$ROOT/server.js" ]; then
            echo "root=$ROOT" >> $GITHUB_OUTPUT
            exit 0
          fi
          FOUND=$(find "$ROOT" -maxdepth 3 -type f -name server.js | head -n1 || true)
          if [ -z "$FOUND" ]; then
            echo "ERROR: server.js not found under $ROOT"
            find "$ROOT" -maxdepth 3 -print || true
            exit 1
          fi
          DIR=$(dirname "$FOUND")
          echo "root=$DIR" >> $GITHUB_OUTPUT
          echo "Resolved standalone root: $DIR"

      - name: Prepare deploy (standalone bundle)
        working-directory: apps/web
        run: |
          set -e
          rm -rf ../site && mkdir -p ../site
          # copy the resolved standalone root into site/
          cp -r "${{ steps.resolve.outputs.root }}"/. ../site/
          # static assets + public
          mkdir -p ../site/.next/static
          cp -r .next/static ../site/.next/static
          cp -r public ../site/public || true
          # remove build-time markers that make Oryx think it should build
          rm -f ../site/package.json ../site/pnpm-lock.yaml ../site/yarn.lock ../site/package-lock.json
          # confirm server.js exists at deploy root
          ls -la ../site | sed -n '1,200p'
          test -f ../site/server.js

      - name: Zip artifact
        working-directory: apps
        run: |
          cd site
          zip -r ../app.zip .

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          audience: api://AzureADTokenExchange

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          package: apps/app.zip
