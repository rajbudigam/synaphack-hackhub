name: Deploy Web (Next.js) to Azure App Service
on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        run: npm i -g pnpm@10

      - name: Corepack sanity
        run: |
          corepack enable
          corepack prepare pnpm@10 --activate
          pnpm -v

      - name: Install deps (root)
        run: pnpm install --no-frozen-lockfile

      - name: Prisma generate (web)
        working-directory: apps/web
        run: pnpm exec prisma generate

      - name: Build (apps/web)
        working-directory: apps/web
        run: |
          set -e
          rm -rf .next
          pnpm build
          echo "=== find server.js under .next/standalone (may be nested) ==="
          find .next/standalone -maxdepth 5 -name server.js -print

      - name: Resolve standalone root
        id: resolve
        working-directory: apps/web
        run: |
          set -e
          ROOT=".next/standalone"
          FOUND=$(find "$ROOT" -maxdepth 5 -type f -name server.js | head -n1 || true)
          [ -n "$FOUND" ] || (echo "ERROR: server.js not found under $ROOT"; find "$ROOT" -maxdepth 5 -print; exit 1)
          DIR=$(dirname "$FOUND")
          echo "root=$DIR" >> $GITHUB_OUTPUT
          echo "Resolved standalone root: $DIR"

      - name: Prepare deploy (standalone bundle)
        working-directory: apps/web
        run: |
          set -e
          rm -rf ../site && mkdir -p ../site

          # Copy the standalone output (includes server.js and its traced node_modules)
          cp -R "${{ steps.resolve.outputs.root }}/." ../site/

          # Copy static/public
          mkdir -p ../site/.next/static
          cp -R .next/static ../site/.next/static || true
          cp -R public ../site/public || true

          # Build a clean node_modules.tar.gz from the traced standalone node_modules
          tar -C "${{ steps.resolve.outputs.root }}/node_modules" -czf ../site/node_modules.tar.gz .

          # IMPORTANT: remove the node_modules directory so Kudu MUST use our tarball (prevents re-tar surprises)
          rm -rf ../site/node_modules

          # Sanity check the tar has key runtime deps
          tar -tf ../site/node_modules.tar.gz | grep '^@next/env/' | head -n1
          tar -tf ../site/node_modules.tar.gz | grep '^@swc/helpers/' | head -n1
          tar -tf ../site/node_modules.tar.gz | grep '^next/' | head -n1

          echo "== site listing =="
          ls -la ../site | sed -n '1,200p'

      - name: Zip artifact
        working-directory: apps
        run: |
          set -e
          cd site
          zip -r ../app.zip .

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          audience: api://AzureADTokenExchange

      - name: Ensure Azure App Service settings
        run: |
          az webapp config appsettings set -g hackhub-rgv -n hackhub-app-870 --settings WEBSITES_PORT=8080 SCM_DO_BUILD_DURING_DEPLOYMENT=false
          az webapp config appsettings set -g hackhub-rgv -n hackhub-app-870 --settings \
            NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }} \
            DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            NODE_ENV=production
          echo "Settings applied."
      
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          package: apps/app.zip