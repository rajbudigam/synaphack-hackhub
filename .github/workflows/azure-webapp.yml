name: Deploy Web (Next.js) to Azure App Service
on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        run: npm i -g pnpm@10

      - name: Corepack sanity
        run: |
          corepack enable
          corepack prepare pnpm@10 --activate
          pnpm -v

      - name: Install deps (root)
        run: pnpm install --no-frozen-lockfile

      - name: Prisma generate (web)
        working-directory: apps/web
        run: pnpm exec prisma generate

      - name: Build (apps/web)
        working-directory: apps/web
        run: |
          set -e
          rm -rf .next
          pnpm build
          echo "=== find server.js under .next/standalone ==="
          find .next/standalone -maxdepth 5 -name server.js -print || true

      - name: Resolve standalone root
        id: resolve
        working-directory: apps/web
        run: |
          set -e
          ROOT=".next/standalone"
          if [ -f "$ROOT/server.js" ]; then
            echo "root=$ROOT" >> $GITHUB_OUTPUT
            exit 0
          fi
          FOUND=$(find "$ROOT" -maxdepth 5 -type f -name server.js | head -n1 || true)
          if [ -z "$FOUND" ]; then
            echo "ERROR: server.js not found under $ROOT"
            find "$ROOT" -maxdepth 5 -print || true
            exit 1
          fi
          DIR=$(dirname "$FOUND")
          echo "root=$DIR" >> $GITHUB_OUTPUT
          echo "Resolved standalone root: $DIR"

      - name: Prepare deploy (copy standalone + pack its node_modules)
        working-directory: apps/web
        run: |
          set -e
          rm -rf ../site && mkdir -p ../site

          # copy the standalone bundle into site/
          cp -r "${{ steps.resolve.outputs.root }}"/. ../site/

          # copy static assets and public
          mkdir -p ../site/.next/static
          cp -r .next/static ../site/.next/static || true
          cp -r public ../site/public || true

          # locate node_modules that sit NEXT TO server.js in the standalone output
          NM=""
          if [ -d "${{ steps.resolve.outputs.root }}/node_modules" ]; then
            NM="${{ steps.resolve.outputs.root }}/node_modules"
          elif [ -d ".next/standalone/apps/web/node_modules" ]; then
            NM=".next/standalone/apps/web/node_modules"
          fi

          if [ -z "$NM" ]; then
            echo "ERROR: could not locate standalone node_modules"
            find .next/standalone -maxdepth 5 -type d -name node_modules
            exit 1
          fi

          # build the tarball from the REAL files in the standalone node_modules
          tar -C "$NM" -czf ../site/node_modules.tar.gz .

          echo "== site root =="
          ls -la ../site | sed -n '1,200p'
          echo "== tar sanity =="
          tar -tf ../site/node_modules.tar.gz | head -n 20

      - name: Zip artifact
        working-directory: apps
        run: |
          set -e
          cd site
          zip -r ../app.zip .

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          audience: api://AzureADTokenExchange

      # Push runtime settings so the app can boot
      - name: Configure App Service app settings
        run: |
          az webapp config appsettings set \
            -g hackhub-rgv -n hackhub-app-870 \
            --settings WEBSITES_PORT=8080 SCM_DO_BUILD_DURING_DEPLOYMENT=false \
                       NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY='${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}' \
                       CLERK_SECRET_KEY='${{ secrets.CLERK_SECRET_KEY }}' \
                       DATABASE_URL='${{ secrets.DATABASE_URL }}'

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: hackhub-app-870
          package: apps/app.zip
