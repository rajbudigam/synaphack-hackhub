name: Deploy Web (Next.js) to Azure App Service
on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      # Build-time envs
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }} # sqlserver://...;database=...;user=...;password=...;encrypt=true;trustServerCertificate=false

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        run: npm i -g pnpm@10

      - name: Enable Corepack (pnpm)
        run: |
          corepack enable
          corepack prepare pnpm@10 --activate
          pnpm -v

      # Make sure Prisma postinstall is allowed under pnpm
      - name: Trust prisma scripts (pnpm)
        run: |
          echo '{ "trustedDependencies": ["@prisma/client","prisma"] }' > pnpm-allow-scripts.json
          cat pnpm-allow-scripts.json

      # Install at repo root (workspace-aware)
      - name: Install deps (root)
        run: pnpm install --frozen-lockfile

      # Generate Prisma client (uses DATABASE_URL from job env)
      - name: Prisma generate (apps/web)
        working-directory: apps/web
        run: pnpm prisma generate

      # Build Next.js in apps/web; next.config.mjs must have output:'standalone'
      - name: Build (apps/web)
        working-directory: apps/web
        env:
          NODE_ENV: production
        run: |
          rm -rf .next
          pnpm build
          echo "=== .next top ==="; ls -la .next | sed -n '1,200p' || true
          echo "=== .next/standalone top ==="; ls -la .next/standalone | sed -n '1,200p' || true

      # Verify standalone output (check from the same folder)
      - name: Verify standalone server.js
        working-directory: apps/web
        run: |
          test -f .next/standalone/server.js || (echo "ERROR: .next/standalone/server.js not found. Ensure apps/web/next.config.mjs has output:'standalone' and that the build ran in apps/web." && exit 1)

      # Prepare minimal deploy folder
      - name: Prepare deploy (standalone bundle)
        working-directory: apps/web
        run: |
          rm -rf ../site && mkdir -p ../site
          # copy standalone server + node_modules bundle
          cp -r .next/standalone/* ../site/
          # static + public
          mkdir -p ../site/.next/static
          cp -r .next/static ../site/.next/static
          cp -r public ../site/public
          # helpful startup shim (App Service runs `node server.js`)
          echo "node server.js" > ../site/startup.sh
          chmod +x ../site/startup.sh
          ls -la ../site | sed -n '1,200p'

      # Zip the CONTENTS of ../site (not the folder name)
      - name: Zip artifact
        working-directory: apps
        run: |
          cd site
          zip -r ../app.zip .

      # Login with SP (publish profile disabled)
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          package: apps/app.zip
          startup-command: "node server.js"