name: Deploy Web (Next.js) to Azure App Service

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      # runtime env (provided as GitHub Secrets)
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      # azure app identity / target
      AZURE_CLIENT_ID:        ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID:        ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_WEBAPP_NAME:      ${{ secrets.AZURE_WEBAPP_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (LTS 20)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm (pinned)
        run: npm i -g pnpm@10.13.1

      - name: Tooling sanity
        run: |
          set -euo pipefail
          node -v
          pnpm -v

      # Install all workspaces (monorepo). We allow lock drift to avoid CI failures.
      - name: Install deps (root)
        run: pnpm install --no-frozen-lockfile

      # Prisma generate uses DATABASE_URL from env
      - name: Prisma generate (apps/web)
        working-directory: apps/web
        run: pnpm exec prisma generate

      - name: Build Next.js (apps/web)
        working-directory: apps/web
        run: |
          set -euo pipefail
          rm -rf .next
          pnpm build
          echo "Search for server.js under .next/standalone (may be nested)..."
          find .next/standalone -maxdepth 5 -type f -name server.js -print

      - name: Resolve standalone root (folder that contains server.js)
        id: resolve
        working-directory: apps/web
        run: |
          set -euo pipefail
          ROOT=".next/standalone"
          FOUND="$(find "$ROOT" -maxdepth 6 -type f -name server.js | head -n1 || true)"
          if [ -z "$FOUND" ]; then
            echo "ERROR: server.js not found under $ROOT"
            find "$ROOT" -maxdepth 6 -print || true
            exit 1
          fi
          DIR="$(dirname "$FOUND")"
          echo "root=$DIR" >> "$GITHUB_OUTPUT"
          echo "Resolved server dir: $DIR"
          
          # Determine the base that holds traced node_modules:
          # - If server.js is at .next/standalone/server.js => BASE=$DIR
          # - If server.js is at .next/standalone/apps/web/server.js => BASE=.next/standalone
          if [ -d "$DIR/node_modules" ]; then
            BASE="$DIR"
          else
            BASE="$(echo "$DIR" | sed 's#/apps/web$##')"
          fi

          if [ ! -d "$BASE/node_modules" ]; then
            echo "ERROR: traced node_modules not found at $BASE/node_modules"
            ls -la "$BASE" || true
            exit 1
          fi

          echo "base=$BASE" >> "$GITHUB_OUTPUT"
          echo "Resolved node_modules base: $BASE"

            - name: Prepare deploy bundle (apps/site)
        working-directory: apps/web
        run: |
          set -euo pipefail
          rm -rf ../site && mkdir -p ../site

          # Copy the server dir (this puts server.js at site/server.js)
          cp -R "${{ steps.resolve.outputs.root }}/." ../site/

          # Copy static/public for Next
          mkdir -p ../site/.next/static
          cp -R .next/static ../site/.next/static || true
          cp -R public ../site/public || true

          # Package the traced node_modules from the BASE computed above
          tar -C "${{ steps.resolve.outputs.base }}/node_modules" -czf ../site/node_modules.tar.gz .

          # Ensure Kudu uses our tar
          rm -rf ../site/node_modules

          echo "== site listing =="
          ls -la ../site | sed -n '1,200p'

      - name: Validate node_modules.tar.gz
        working-directory: apps
        run: |
          set -euo pipefail
          test -f site/node_modules.tar.gz
          echo "Tar size:"
          du -h site/node_modules.tar.gz

          # Require critical runtime deps to exist in the tar
          tar -tf site/node_modules.tar.gz | grep -q '^@next/env/'        || (echo "MISSING: @next/env in tar" && exit 1)
          tar -tf site/node_modules.tar.gz | grep -q '^@swc/helpers/'     || (echo "MISSING: @swc/helpers in tar" && exit 1)
          tar -tf site/node_modules.tar.gz | grep -q '^next/'             || (echo "MISSING: next in tar" && exit 1)
          tar -tf site/node_modules.tar.gz | head -n 20

      - name: Zip artifact
        working-directory: apps
        run: |
          set -euo pipefail
          cd site
          zip -r ../app.zip .

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id:        ${{ env.AZURE_CLIENT_ID }}
          tenant-id:        ${{ env.AZURE_TENANT_ID }}
          subscription-id:  ${{ env.AZURE_SUBSCRIPTION_ID }}
          audience: api://AzureADTokenExchange

      # Ensure required App Service settings for Node on Linux
      - name: Configure App Service settings (idempotent)
        run: |
          set -euo pipefail
          az webapp config appsettings set -g hackhub-rgv -n "$AZURE_WEBAPP_NAME" \
            --settings WEBSITES_PORT=8080 SCM_DO_BUILD_DURING_DEPLOYMENT=false NODE_ENV=production \
                       NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY='${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}' \
                       DATABASE_URL='${{ secrets.DATABASE_URL }}'
          echo "Applied app settings."

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: apps/app.zip

      # Optional but helpful: restart + smoke test
      - name: Restart & Smoke Test
        run: |
          set -euo pipefail
          az webapp restart -g hackhub-rgv -n "$AZURE_WEBAPP_NAME"
          echo "Warming up..."
          for i in $(seq 1 20); do
            sleep 5
            if curl -fsS "https://${AZURE_WEBAPP_NAME}.azurewebsites.net/" -I | grep -qE 'HTTP/1.1 200|HTTP/2 200|HTTP/1.1 307|HTTP/2 307'; then
              echo "App responded âœ…"
              exit 0
            fi
            echo "retry $i..."
          done
          echo "Smoke test failed"
          exit 1
